security:
    #encoders:
    #   App\Entity\User:
    #       algorithm: argon2i
    encoders:
      App\Entity\Usuarios:
        id: 'App\Security\Encoder\MyCustomPasswordEncoder'
      #algorithm: bcrypt
      #App\Entity\Usuarios:
        #id: 'App\Security\Encoder\MyCustomPasswordEncoder'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                #class: App\Entity\User
                class: App\Entity\Usuarios
                #property: username
                property: usuario
                manager_name: intranet
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            logout:
                path:   app_logout

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
         - { path: ^/lucky/number, roles: ROLE_USER }
         - { path: ^/admin, roles: ROLE_USER }
         - { path: ^/facturas, roles: ROLE_USER }
         - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         #- { path: ^/login, allow_if: "is_anonymous() and !is_authenticated()"
         - { path: ^/, roles: ROLE_USER }
        
